import { Component, importProvidersFrom, inject, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { GeolocationService } from 'src/services/geolocation.services';
import * as L from 'leaflet';

@Component({
  selector: 'app-folder',
  templateUrl: './folder.page.html',
  styleUrls: ['./folder.page.scss'],
  standalone: false,
})
export class FolderPage implements OnInit {
  public folder!: string;
  private activatedRoute = inject(ActivatedRoute);
  private map: any;
  public currentLocation: any;

  // Th√¥ng tin nh√≥m v√† app
  public appInfo = {
    name: 'GIS Mobile App',
    description: '·ª®ng d·ª•ng b·∫£n ƒë·ªì chuy√™n ƒë·ªÅ s·ª≠ d·ª•ng Ionic Angular',
    version: '1.0.0'
  };

  public teamInfo = {
    groupName: 'Nh√≥m 9',
    className: 'DH22HM',
    major: 'H·ªá th·ªëng th√¥ng tin ƒë·ªãa l√Ω',
    members: [
      'ƒêinh Tr√∫c V√¢n: 22166102',
      'Nguy·ªÖn Qu·ª≥nh Nhi: 22166065',
      'H·ªì V√µ Minh Tr∆∞·ªùng: 22166093',
      'Nguy·ªÖn Minh Ph√∫: 22166069',
      'Tr·∫ßn Xu√¢n Tr∆∞·ªùng: 22166095',
      'Nguy·ªÖn Ho√†ng Minh Tu·∫•n: 22166098',
      'Nguy·ªÖn ƒê·ª©c Tr·ªçng: 22166091',
      'Tr·∫ßn D∆∞∆°ng Vinh: 22166103',
    ]
  };

  // D·ªØ li·ªáu b·∫£n ƒë·ªì chuy√™n ƒë·ªÅ m·∫´u
  public thematicLayers = [
    {
      name: 'Tr∆∞·ªùng ƒê·∫°i h·ªçc',
      description: 'C√°c tr∆∞·ªùng ƒë·∫°i h·ªçc t·∫°i TP.HCM',
      data: [
        { name: 'ƒêH B√°ch Khoa', lat: 10.7721, lng: 106.6576, info: 'ƒê·∫°i h·ªçc B√°ch khoa TP.HCM' },
        { name: 'ƒêH Khoa h·ªçc T·ª± nhi√™n', lat: 10.7626, lng: 106.6824, info: 'ƒê·∫°i h·ªçc Khoa h·ªçc T·ª± nhi√™n' },
        { name: 'ƒêH Kinh t·∫ø', lat: 10.7308, lng: 106.6941, info: 'ƒê·∫°i h·ªçc Kinh t·∫ø TP.HCM' }
      ]
    },
    {
      name: 'B·ªánh vi·ªán',
      description: 'C√°c b·ªánh vi·ªán l·ªõn t·∫°i TP.HCM',
      data: [
        { name: 'BV Ch·ª£ R·∫´y', lat: 10.7542, lng: 106.6665, info: 'B·ªánh vi·ªán Ch·ª£ R·∫´y' },
        { name: 'BV B√¨nh Dan', lat: 10.7507, lng: 106.6647, info: 'B·ªánh vi·ªán B√¨nh Dan' },
        { name: 'BV 115', lat: 10.7825, lng: 106.6958, info: 'B·ªánh vi·ªán 115' }
      ]
    }
  ];


  constructor(
    private geolocationService: GeolocationService
  ) { }

  ngOnInit() {
    this.folder = this.activatedRoute.snapshot.paramMap.get('id') as string;

    if (this.folder === 'explore') {
      setTimeout(() => {
        this.initializeMap();
      }, 100);
    }
  }

  ngOnDestroy() {
    if (this.map) {
      this.map.remove();
    }
  }


  async getCurrentLocation() {
    try {
      const permissions = await this.geolocationService.checkPermissions();

      if (permissions.location !== 'granted') {
        await this.geolocationService.requestPermissions();
      }

      this.currentLocation = await this.geolocationService.getCurrentPosition();

      if (this.map && this.currentLocation) {
        // Th√™m marker v·ªã tr√≠ hi·ªán t·∫°i l√™n b·∫£n ƒë·ªì
        const userMarker = L.marker([this.currentLocation.latitude, this.currentLocation.longitude])
          .addTo(this.map)
          .bindPopup(`
            <div>
              <h4>V·ªã tr√≠ hi·ªán t·∫°i</h4>
              <p>Lat: ${this.currentLocation.latitude.toFixed(6)}</p>
              <p>Lng: ${this.currentLocation.longitude.toFixed(6)}</p>
              <p>ƒê·ªô ch√≠nh x√°c: ${this.currentLocation.accuracy}m</p>
            </div>
          `);

        // Di chuy·ªÉn b·∫£n ƒë·ªì ƒë·∫øn v·ªã tr√≠ hi·ªán t·∫°i
        this.map.setView([this.currentLocation.latitude, this.currentLocation.longitude], 15);
      }
    } catch (error) {
      console.error('L·ªói khi l·∫•y v·ªã tr√≠:', error);
      alert('Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ hi·ªán t·∫°i. Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p v·ªã tr√≠.');
    }
  }

  // private initializeMap() {
  //   // Kh·ªüi t·∫°o b·∫£n ƒë·ªì v·ªõi OpenStreetMap
  //   this.map = L.map('map', {
  //     center: [10.762622, 106.660172],
  //     zoom: 11,
  //     scrollWheelZoom: true,
  //     touchZoom: true,
  //     doubleClickZoom: true,
  //     boxZoom: false,
  //     preferCanvas: true, // TƒÉng performance
  //     renderer: L.canvas() // S·ª≠ d·ª•ng Canvas thay v√¨ SVG
  //   });

  //   // Th√™m layer OpenStreetMap
  //   L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  //     attribution: '¬© OpenStreetMap contributors'
  //   }).addTo(this.map);

  //   // Th√™m Google Maps layer (v·ªá tinh)
  //   const googleSat = L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
  //     maxZoom: 20,
  //     subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
  //   });

  //   // Th√™m Google Maps layer (ƒë∆∞·ªùng)
  //   const googleStreets = L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
  //     maxZoom: 20,
  //     subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
  //   });

  //   // Th√™m control layers
  //   const baseMaps = {
  //     "OpenStreetMap": L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'),
  //     "Google Streets": googleStreets,
  //     "Google Satellite": googleSat
  //   };

  //   L.control.layers(baseMaps).addTo(this.map);

  //   // Th√™m c√°c ƒëi·ªÉm d·ªØ li·ªáu chuy√™n ƒë·ªÅ
  //   this.addThematicLayers();
  // }

  private initializeMap() {
    // Kh·ªüi t·∫°o b·∫£n ƒë·ªì v·ªõi OpenStreetMap (load nhanh h∆°n Google Maps)
    this.map = L.map('map', {
      center: [10.762622, 106.660172],
      zoom: 11,
      scrollWheelZoom: true,
      touchZoom: true,
      doubleClickZoom: true,
      boxZoom: false,
      preferCanvas: true, // TƒÉng performance
      renderer: L.canvas() // S·ª≠ d·ª•ng Canvas thay v√¨ SVG
    });

    // S·ª≠ d·ª•ng OpenStreetMap l√†m layer ch√≠nh (load nhanh nh·∫•t)
    const osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '¬© OpenStreetMap contributors',
      maxZoom: 18,
      minZoom: 8
    }).addTo(this.map);

    // C√°c layer b·ªï sung (optional)
    const googleSat = L.tileLayer('https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
      attribution: '¬© Google',
      maxZoom: 18,
      minZoom: 8
    });

    const googleStreets = L.tileLayer('https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
      attribution: '¬© Google',
      maxZoom: 18,
      minZoom: 8
    });

    // Control layers (·∫©n m·∫∑c ƒë·ªãnh ƒë·ªÉ g·ªçn g√†ng)
    const baseMaps = {
      "OpenStreetMap": osmLayer,
      "Google Streets": googleStreets,
      "Google Satellite": googleSat
    };

    const layerControl = L.control.layers(baseMaps, undefined, {
      collapsed: true,
      position: 'topright'
    }).addTo(this.map);

    // Th√™m c√°c ƒëi·ªÉm d·ªØ li·ªáu chuy√™n ƒë·ªÅ
    this.addThematicLayers();
  }

  private addThematicLayers() {
    // T·∫°o c√°c icon kh√°c nhau cho t·ª´ng lo·∫°i
    const universityIcon = L.divIcon({
      className: 'custom-icon university-icon',
      html: 'üéì',
      iconSize: [30, 30]
    });

    const hospitalIcon = L.divIcon({
      className: 'custom-icon hospital-icon',
      html: 'üè•',
      iconSize: [30, 30]
    });

    // Th√™m layer tr∆∞·ªùng ƒë·∫°i h·ªçc
    this.thematicLayers[0].data.forEach(point => {
      L.marker([point.lat, point.lng], { icon: universityIcon })
        .addTo(this.map)
        .bindPopup(`
          <div>
            <h4>${point.name}</h4>
            <p>${point.info}</p>
            <p><strong>Lo·∫°i:</strong> Tr∆∞·ªùng ƒê·∫°i h·ªçc</p>
          </div>
        `);
    });

    // Th√™m layer b·ªánh vi·ªán
    this.thematicLayers[1].data.forEach(point => {
      L.marker([point.lat, point.lng], { icon: hospitalIcon })
        .addTo(this.map)
        .bindPopup(`
          <div>
            <h4>${point.name}</h4>
            <p>${point.info}</p>
            <p><strong>Lo·∫°i:</strong> B·ªánh vi·ªán</p>
          </div>
        `);
    });
  }


  getPageTitle(): string {
    switch (this.folder) {
      case 'home': return 'Trang ch·ªß';
      case 'about': return 'Gi·ªõi thi·ªáu';
      case 'explore': return 'Kh√°m ph√° b·∫£n ƒë·ªì';
      case 'contact': return 'Li√™n h·ªá';
      default: return this.folder;
    }
  }

}
